{"version":3,"sources":["Components/Presentation/Header/Header.jsx","Components/Presentation/Jumbotron/Jumbotron.jsx","Components/Presentation/Footer/Footer.jsx","Components/Presentation/Project/Project.jsx","Components/Container/Projects/Projects.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","props","siteTitle","className","document","title","concat","react_default","a","createElement","href","style","backgroundImage","process","Jumbotron","header","subtext","imageHref","imageAlt","Image","src","alt","imageFit","ImageFit","contain","maximizeFrame","width","Footer","githubUsername","rightText","Link","target","Project","titleHref","actionText","actionHref","actionOnClick","logoHref","logoAlt","showHorizontalRule","react","PrimaryButton","text","onClick","Projects","_this$props","this","projects","Array","from","map","p","i","Presentation_Project_Project","key","id","length","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","emails","split","v","atob","index","Math","round","random","state","gravatarHref","md5","Presentation_Header_Header","window","location","hostname","Presentation_Jumbotron_Jumbotron","Container_Projects_Projects","Presentation_Footer_Footer","Boolean","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd7954a2.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Header.css\";\n\nconst Header = props => {\n    const { siteTitle, className } = props;\n    document.title = `Welcome to ${siteTitle}!`;\n    return (\n        <header className={`${className ? `${className} ` : \"\"}d-flex align-items-center ms-bgColor-themeDarker`}>\n            <a href=\"/\" className=\"d-flex align-items-center ml-3\">\n                <div className=\"logo\" style={{ backgroundImage: `url(\"${process.env.REACT_APP_LOGO_HREF}\")` }} />\n                <div className=\"ms-font-xl ml-1 ms-fontColor-white\">{siteTitle}</div>\n            </a>\n        </header>\n    );\n};\n\nHeader.propTypes = {\n    siteTitle: PropTypes.string.isRequired,\n    className: PropTypes.string,\n}\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Image, ImageFit } from \"office-ui-fabric-react\";\n\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = props => {\n    const { header, subtext, imageHref, imageAlt } = props;\n    return (\n        <div className=\"ms-bgColor-neutralLight pv-3 ms-borderBox jumbotron\">\n            <div className=\"d-flex container\">\n                {imageHref && (\n                    <Image\n                        src={imageHref}\n                        alt={imageAlt}\n                        imageFit={ImageFit.contain}\n                        maximizeFrame\n                        width=\"12rem\"\n                        className=\"flex-shrink-0 flex-grow-0 rounded ms-hiddenMdDown\"\n                    />\n                )}\n                <div className=\"text-container flex-fill mv-auto ml-3\">\n                    <div className=\"ms-font-su jumbotron-header\">{header}</div>\n                    <div className=\"ms-fontSize-xl ms-fontWeight-light jumbotron-subtext\">\n                        {subtext}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nJumbotron.propTypes = {\n    header: PropTypes.string.isRequired,\n    subtext: PropTypes.string\n};\n\nexport default Jumbotron;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Link } from \"office-ui-fabric-react\"\n\nimport \"./Footer.css\";\n\nconst Footer = props => {\n    const { githubUsername, rightText, className } = props;\n    return (\n        <footer\n            className={`${\n                className ? `${className} ` : \"\"\n            }d-flex ${\n                githubUsername ? \"justify-content-between\" : \"justify-content-end\"\n            } align-items-center ms-bgColor-themeDarker`}\n        >\n            { githubUsername && (\n                <Link\n                    href={`//github.com/${githubUsername}`}\n                    className=\"ml-3 ms-fontWeight-light d-flex\"\n                    target=\"_blank\"\n                >\n                    <i className=\"fab fa-github ms-fontSize-xl\"></i>\n                    <span className=\"ml-1\">{githubUsername}</span>\n                </Link>\n            ) }\n            <div className=\"mr-3 ms-fontColor-white ms-fontWeight-light\">{rightText}</div>\n        </footer>\n    );\n};\n\nFooter.propTypes = {\n    githubUsername: PropTypes.string,\n    rightText: PropTypes.string.isRequired,\n    className: PropTypes.string,\n}\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { PrimaryButton, Image, ImageFit, Link } from \"office-ui-fabric-react\";\n\nimport \"./Project.css\";\n\n\nconst Project = props => {\n    const {\n        title,\n        titleHref,\n        subtext,\n        actionText,\n        actionHref,\n        actionOnClick,\n        logoHref,\n        logoAlt,\n        showHorizontalRule,\n        className\n    } = props;\n\n    return (\n        <Fragment>\n            <div className={`${className ? `${className} ` : \"\"}d-flex project-container`}>\n                <div className=\"flex-fill project-text d-flex flex-column\">\n                    { titleHref ? (\n                        <Link className=\"mt-3 ms-font-xxl title\" href={titleHref} target=\"_blank\">{title}</Link>\n                    ) : (\n                        <div className=\"mt-3 ms-font-xxl title\">{title}</div>\n                    )}\n                    {subtext && <div className=\"mt-1 mb-auto ms-font-l subtext\">{subtext}</div>}\n                    {actionText && (\n                        <div className=\"mt-3 mh-auto\">\n                            <PrimaryButton text={actionText} href={actionHref} target=\"_blank\" onClick={actionOnClick} />\n                        </div>\n                    )}\n                </div>\n                <div className=\"project-logo flex-shrink-0\">\n                    <Image src={logoHref || process.env.REACT_APP_LOGO_HREF} alt={logoAlt || title} maximizeFrame imageFit={ImageFit.contain}  />\n                </div>\n            </div>\n            {showHorizontalRule && <hr className=\"w-100\" />}\n        </Fragment>\n    );\n};\n\nProject.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    titleHref: PropTypes.string,\n    subtext: PropTypes.string,\n    actionText: PropTypes.string,\n    actionHref: PropTypes.string,\n    actionOnClick: PropTypes.func,\n    logoHref: PropTypes.string,\n    logoAlt: PropTypes.string,\n    showHorizontalRule: PropTypes.bool,\n    className: PropTypes.string\n};\n\nexport default Project;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Project from \"../../Presentation/Project/Project\";\n\nimport \"./Projects.css\";\n\nclass Projects extends Component {\n    render() {\n        let { projects, className } = this.props;\n        projects = Array.from(projects);\n        return (\n            <div className={`${className ? `${className} ` : \"\"}Projects mh-5 d-flex flex-column`}>\n                {projects.map((p, i, a) => (\n                    <Project\n                        key={`project-${p.id}`}\n                        id={p.id}\n                        title={p.title}\n                        titleHref={p.titleHref}\n                        subtext={p.subtext}\n                        actionText={p.actionText}\n                        actionHref={p.actionHref}\n                        actionOnClick={p.actionOnClick}\n                        logoHref={p.logoHref}\n                        logoAlt={p.logoAlt}\n                        showHorizontalRule={i !== a.length - 1}\n                        className=\"mb-3 ms-slideRightIn40\"\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nProjects.propTypes = {\n    projects: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            titleHref: PropTypes.string,\n            subtext: PropTypes.string,\n            actionText: PropTypes.string,\n            actionHref: PropTypes.string,\n            actionOnClick: PropTypes.func,\n            logoHref: PropTypes.string,\n            logoAlt: PropTypes.string\n        })\n    ).isRequired,\n    className: PropTypes.string,\n};\n\nexport default Projects;\n","import React, { Component } from \"react\";\nimport md5 from \"md5\";\n\nimport Header from \"./Components/Presentation/Header/Header\";\nimport Jumbotron from \"./Components/Presentation/Jumbotron/Jumbotron\";\nimport Footer from \"./Components/Presentation/Footer/Footer\";\nimport Projects from \"./Components/Container/Projects/Projects\";\n\nimport projects from \"./projects.json\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const emails = (process.env.REACT_APP_GRAVATAR_EMAILS).split(\";\").map(v => atob(v));\n        const index = Math.round(Math.random() * (emails.length -1));\n        this.state = { gravatarHref: `//gravatar.com/avatar/${md5(emails[index])}?s=600` }\n    }\n\n    render() {\n        const { gravatarHref } = this.state;\n\n        return (\n            <div className=\"App d-flex flex-column\">\n                <Header className=\"flex-shrink-0\" siteTitle={window.location.hostname} />\n                <div className=\"flex-fill d-flex flex-column content oy-auto\">\n                    <Jumbotron header=\"Welcome!\" subtext=\"This site showcases my work. Please take the time to look around and feel free to reach out if you're interested in working with me!\" imageHref={gravatarHref} imageAlt=\"Gravatar\" />\n                    <div className=\"container\">\n                        <Projects projects={projects} />\n                    </div>\n                </div>\n                <Footer className=\"flex-shrink-0\" githubUsername={process.env.REACT_APP_GITHUB_USERNAME} rightText=\"Built in 2018 by Martin Tracey\" />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nconst registerValidSW = (swUrl, config) => {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n};\r\n\r\nconst checkValidServiceWorker = (swUrl, config) => {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n};\r\n\r\nexport const register = (config) => {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const unregister = () => {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"office-ui-fabric-react/dist/css/fabric.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"./helpers.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}